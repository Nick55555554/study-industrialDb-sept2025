import customtkinter as ctk
from tkinter import ttk, messagebox
import threading
import re

class AttackTable:
    def __init__(self, parent, app):
        self.app = app
        self.selected_columns = []
        self.setup_ui(parent)

    def setup_ui(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        main_frame = ctk.CTkFrame(parent, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=15, pady=15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        header_frame.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(header_frame, text="üîç Advanced Query Builder", 
                     font=ctk.CTkFont(size=24, weight="bold")).pack(side="left")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabview = ctk.CTkTabview(main_frame, fg_color=self.app.colors["card_bg"])
        self.tabview.pack(fill="both", expand=True)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.select_tab = self.tabview.add("üìã SELECT Builder")
        self.search_tab = self.tabview.add("üîé Text Search")
        self.functions_tab = self.tabview.add("üõ†Ô∏è String Functions")

        # –ù–∞–ø–æ–ª–Ω—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.setup_select_tab()
        self.setup_search_tab()
        self.setup_functions_tab()

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_frame = ctk.CTkFrame(main_frame, fg_color="transparent", height=30)
        self.status_frame.pack(fill="x", pady=(10, 0))
        self.status_frame.pack_propagate(False)

        self.status_label = ctk.CTkLabel(self.status_frame, text="Ready to build queries",
                                         text_color=self.app.colors["text_muted"],
                                         font=ctk.CTkFont(size=12))
        self.status_label.pack(side="left")

    def setup_select_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ SELECT –∑–∞–ø—Ä–æ—Å–æ–≤"""
        container = ctk.CTkFrame(self.select_tab, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=20, pady=20)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        top_panel = ctk.CTkFrame(container, fg_color=self.app.colors["card_bg"], corner_radius=12)
        top_panel.pack(fill="x", pady=(0, 10))

        top_content = ctk.CTkFrame(top_panel, fg_color="transparent")
        top_content.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(top_content, text="Select Table:", 
                    font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(0, 10))

        self.table_selector = ctk.CTkComboBox(top_content, 
                                             values=["Loading..."],
                                             width=200,
                                             command=self.on_table_selected)
        self.table_selector.pack(side="left", padx=(0, 10))

        ctk.CTkButton(top_content, text="üîÑ Refresh", 
                     command=self.refresh_table_structure,
                     width=80).pack(side="left")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_content = ctk.CTkFrame(container, fg_color="transparent")
        main_content.pack(fill="both", expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –∏ —É—Å–ª–æ–≤–∏—è
        left_panel = ctk.CTkFrame(main_content, fg_color=self.app.colors["card_bg"], corner_radius=12)
        left_panel.pack(side="left", fill="both", expand=True, padx=(0, 10))

        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
        columns_section = ctk.CTkFrame(left_panel, fg_color="transparent")
        columns_section.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(columns_section, text="üìä Select Columns", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w")

        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        columns_frame = ctk.CTkFrame(columns_section, fg_color="transparent")
        columns_frame.pack(fill="x", pady=10)

        ctk.CTkLabel(columns_frame, text="Available Columns:").pack(anchor="w")
        
        self.available_columns_list = tk.Listbox(columns_frame, 
                                               bg=self.app.colors["card_bg"],
                                               fg=self.app.colors["text_light"],
                                               selectbackground=self.app.colors["primary"],
                                               height=6)
        scrollbar1 = ctk.CTkScrollbar(columns_frame, orientation="vertical", command=self.available_columns_list.yview)
        self.available_columns_list.configure(yscrollcommand=scrollbar1.set)
        
        self.available_columns_list.pack(side="left", fill="both", expand=True)
        scrollbar1.pack(side="right", fill="y")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–æ–Ω–æ–∫
        column_buttons = ctk.CTkFrame(columns_frame, fg_color="transparent")
        column_buttons.pack(fill="x", pady=5)

        ctk.CTkButton(column_buttons, text="‚û°Ô∏è Add", 
                     command=self.add_column,
                     width=80).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(column_buttons, text="‚¨ÖÔ∏è Remove", 
                     command=self.remove_column,
                     width=80).pack(side="left", padx=5)

        ctk.CTkButton(column_buttons, text="‚≠ê Add All", 
                     command=self.add_all_columns,
                     width=80).pack(side="left", padx=5)

        # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        ctk.CTkLabel(columns_frame, text="Selected Columns:").pack(anchor="w", pady=(10, 0))
        
        self.selected_columns_list = tk.Listbox(columns_frame,
                                              bg=self.app.colors["card_bg"],
                                              fg=self.app.colors["text_light"],
                                              selectbackground=self.app.colors["success"],
                                              height=6)
        scrollbar2 = ctk.CTkScrollbar(columns_frame, orientation="vertical", command=self.selected_columns_list.yview)
        self.selected_columns_list.configure(yscrollcommand=scrollbar2.set)
        
        self.selected_columns_list.pack(side="left", fill="both", expand=True)
        scrollbar2.pack(side="right", fill="y")

        # –°–µ–∫—Ü–∏—è WHERE —É—Å–ª–æ–≤–∏—è
        where_section = ctk.CTkFrame(left_panel, fg_color="transparent")
        where_section.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(where_section, text="üîç WHERE Conditions", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w")

        where_content = ctk.CTkFrame(where_section, fg_color="transparent")
        where_content.pack(fill="x", pady=10)

        # –ü–æ–ª–µ –¥–ª—è WHERE —É—Å–ª–æ–≤–∏—è
        ctk.CTkLabel(where_content, text="WHERE Condition:").pack(anchor="w")
        self.where_condition = ctk.CTkEntry(where_content, 
                                          placeholder_text="age > 18 AND name LIKE 'A%'")
        self.where_condition.pack(fill="x", pady=(5, 10))

        # –°–µ–∫—Ü–∏—è GROUP BY –∏ HAVING
        group_section = ctk.CTkFrame(left_panel, fg_color="transparent")
        group_section.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(group_section, text="üìä GROUP BY & HAVING", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w")

        group_content = ctk.CTkFrame(group_section, fg_color="transparent")
        group_content.pack(fill="x", pady=10)

        ctk.CTkLabel(group_content, text="GROUP BY Columns:").pack(anchor="w")
        self.group_by_columns = ctk.CTkEntry(group_content, 
                                           placeholder_text="department, year")
        self.group_by_columns.pack(fill="x", pady=(5, 5))

        ctk.CTkLabel(group_content, text="HAVING Condition:").pack(anchor="w", pady=(10, 0))
        self.having_condition = ctk.CTkEntry(group_content, 
                                           placeholder_text="COUNT(*) > 5")
        self.having_condition.pack(fill="x", pady=(5, 10))

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - ORDER BY –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        right_panel = ctk.CTkFrame(main_content, fg_color=self.app.colors["card_bg"], corner_radius=12)
        right_panel.pack(side="left", fill="both", expand=True)

        # –°–µ–∫—Ü–∏—è ORDER BY
        order_section = ctk.CTkFrame(right_panel, fg_color="transparent")
        order_section.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(order_section, text="üìà ORDER BY", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w")

        order_content = ctk.CTkFrame(order_section, fg_color="transparent")
        order_content.pack(fill="x", pady=10)

        ctk.CTkLabel(order_content, text="Sort Columns:").pack(anchor="w")
        self.order_by_columns = ctk.CTkEntry(order_content, 
                                           placeholder_text="name ASC, age DESC")
        self.order_by_columns.pack(fill="x", pady=(5, 10))

        # –°–µ–∫—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        aggregate_section = ctk.CTkFrame(right_panel, fg_color="transparent")
        aggregate_section.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(aggregate_section, text="üßÆ Aggregate Functions", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w")

        aggregate_content = ctk.CTkFrame(aggregate_section, fg_color="transparent")
        aggregate_content.pack(fill="x", pady=10)

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        agg_buttons_frame = ctk.CTkFrame(aggregate_content, fg_color="transparent")
        agg_buttons_frame.pack(fill="x")

        ctk.CTkButton(agg_buttons_frame, text="COUNT(*)", 
                     command=lambda: self.add_aggregate("COUNT(*)"),
                     width=100).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(agg_buttons_frame, text="AVG(column)", 
                     command=lambda: self.show_aggregate_dialog("AVG"),
                     width=100).pack(side="left", padx=5)
        
        ctk.CTkButton(agg_buttons_frame, text="SUM(column)", 
                     command=lambda: self.show_aggregate_dialog("SUM"),
                     width=100).pack(side="left", padx=5)

        agg_buttons_frame2 = ctk.CTkFrame(aggregate_content, fg_color="transparent")
        agg_buttons_frame2.pack(fill="x", pady=5)

        ctk.CTkButton(agg_buttons_frame2, text="MAX(column)", 
                     command=lambda: self.show_aggregate_dialog("MAX"),
                     width=100).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(agg_buttons_frame2, text="MIN(column)", 
                     command=lambda: self.show_aggregate_dialog("MIN"),
                     width=100).pack(side="left", padx=5)

        # –°–µ–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ SQL
        preview_section = ctk.CTkFrame(right_panel, fg_color="transparent")
        preview_section.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(preview_section, text="üëÅÔ∏è SQL Preview", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w")

        self.sql_preview = ctk.CTkTextbox(preview_section, height=120)
        self.sql_preview.pack(fill="both", expand=True, pady=(10, 10))
        self.sql_preview.configure(state="disabled")

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        action_buttons = ctk.CTkFrame(right_panel, fg_color="transparent")
        action_buttons.pack(fill="x", padx=20, pady=15)

        ctk.CTkButton(action_buttons, text="üîÑ Update Preview", 
                     command=self.update_sql_preview,
                     width=140).pack(side="left", padx=(0, 10))

        ctk.CTkButton(action_buttons, text="‚ö° Execute Query", 
                     command=self.execute_query,
                     fg_color=self.app.colors["success"],
                     hover_color="#1a8a4f",
                     width=140).pack(side="left")

    def setup_search_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        container = ctk.CTkFrame(self.search_tab, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=20, pady=20)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏
        top_panel = ctk.CTkFrame(container, fg_color=self.app.colors["card_bg"], corner_radius=12)
        top_panel.pack(fill="x", pady=(0, 10))

        top_content = ctk.CTkFrame(top_panel, fg_color="transparent")
        top_content.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(top_content, text="Select Table & Column:", 
                    font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(0, 10))

        self.search_table_selector = ctk.CTkComboBox(top_content, 
                                                   values=["Loading..."],
                                                   width=150,
                                                   command=self.on_search_table_selected)
        self.search_table_selector.pack(side="left", padx=(0, 10))

        self.search_column_selector = ctk.CTkComboBox(top_content, 
                                                    values=["Select table first"],
                                                    width=150)
        self.search_column_selector.pack(side="left", padx=(0, 10))

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_content = ctk.CTkFrame(container, fg_color="transparent")
        main_content.pack(fill="both", expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
        left_panel = ctk.CTkFrame(main_content, fg_color=self.app.colors["card_bg"], corner_radius=12)
        left_panel.pack(side="left", fill="both", expand=True, padx=(0, 10))

        search_config_frame = ctk.CTkFrame(left_panel, fg_color="transparent")
        search_config_frame.pack(fill="both", expand=True, padx=20, pady=20)

        ctk.CTkLabel(search_config_frame, text="üîç Search Configuration", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(0, 15))

        # –¢–∏–ø –ø–æ–∏—Å–∫–∞
        ctk.CTkLabel(search_config_frame, text="Search Type:").pack(anchor="w")
        self.search_type = ctk.CTkComboBox(search_config_frame,
                                         values=["LIKE Pattern", "POSIX Regex", "Full Text Search"])
        self.search_type.pack(fill="x", pady=(5, 15))
        self.search_type.set("LIKE Pattern")
        self.search_type.configure(command=self.on_search_type_changed)

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        ctk.CTkLabel(search_config_frame, text="Search Pattern:").pack(anchor="w")
        self.search_pattern = ctk.CTkEntry(search_config_frame, 
                                         placeholder_text="Enter search pattern")
        self.search_pattern.pack(fill="x", pady=(5, 10))

        # –û–ø—Ü–∏–∏ –¥–ª—è LIKE
        self.like_options_frame = ctk.CTkFrame(search_config_frame, fg_color="transparent")
        self.like_options_frame.pack(fill="x", pady=5)

        self.case_sensitive = ctk.BooleanVar(value=False)
        ctk.CTkCheckBox(self.like_options_frame, text="Case Sensitive", 
                       variable=self.case_sensitive).pack(anchor="w")

        # –û–ø—Ü–∏–∏ –¥–ª—è Regex
        self.regex_options_frame = ctk.CTkFrame(search_config_frame, fg_color="transparent")
        
        self.regex_flags = ctk.StringVar(value="")
        ctk.CTkCheckBox(self.regex_options_frame, text="Case Insensitive (i)",
                       variable=ctk.BooleanVar(value=False),
                       command=lambda: self.toggle_regex_flag('i')).pack(anchor="w")
        ctk.CTkCheckBox(self.regex_options_frame, text="Multiline (m)",
                       variable=ctk.BooleanVar(value=False),
                       command=lambda: self.toggle_regex_flag('m')).pack(anchor="w")

        # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞
        examples_frame = ctk.CTkFrame(search_config_frame, fg_color="transparent")
        examples_frame.pack(fill="x", pady=15)

        ctk.CTkLabel(examples_frame, text="üí° Search Examples:", 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w")

        examples_text = """
LIKE Examples:
‚Ä¢ 'john%' - names starting with 'john'
‚Ä¢ '%son' - names ending with 'son'  
‚Ä¢ '%smith%' - names containing 'smith'
‚Ä¢ '_e%' - names with 'e' as second letter

Regex Examples:
‚Ä¢ '^J.*n$' - starts with J, ends with n
‚Ä¢ 'Sm(th|ith)' - Smith or Sm ith
‚Ä¢ '[A-Z][a-z]+' - Capitalized words
‚Ä¢ '\\d{3}-\\d{2}-\\d{4}' - SSN pattern
        """
        
        examples_label = ctk.CTkLabel(examples_frame, text=examples_text,
                                    justify="left", font=ctk.CTkFont(size=11),
                                    text_color=self.app.colors["text_muted"])
        examples_label.pack(anchor="w", pady=5)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        search_buttons = ctk.CTkFrame(search_config_frame, fg_color="transparent")
        search_buttons.pack(fill="x", pady=10)

        ctk.CTkButton(search_buttons, text="üîç Test Pattern", 
                     command=self.test_search_pattern,
                     width=120).pack(side="left", padx=(0, 10))

        ctk.CTkButton(search_buttons, text="‚ö° Execute Search", 
                     command=self.execute_search,
                     fg_color=self.app.colors["primary"],
                     hover_color="#1f4a63",
                     width=120).pack(side="left")

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        right_panel = ctk.CTkFrame(main_content, fg_color=self.app.colors["card_bg"], corner_radius=12)
        right_panel.pack(side="left", fill="both", expand=True)

        results_frame = ctk.CTkFrame(right_panel, fg_color="transparent")
        results_frame.pack(fill="both", expand=True, padx=20, pady=20)

        ctk.CTkLabel(results_frame, text="üß™ Pattern Testing", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(0, 15))

        # –ü–æ–ª–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        ctk.CTkLabel(results_frame, text="Test Data (one per line):").pack(anchor="w")
        self.test_data = ctk.CTkTextbox(results_frame, height=100)
        self.test_data.pack(fill="x", pady=(5, 10))
        self.test_data.insert("1.0", "John Smith\nJane Doe\nBob Johnson\nAlice Williams")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ctk.CTkLabel(results_frame, text="Test Results:").pack(anchor="w")
        self.test_results = ctk.CTkTextbox(results_frame, height=150)
        self.test_results.pack(fill="both", expand=True, pady=(5, 10))
        self.test_results.configure(state="disabled")

    def setup_functions_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏"""
        container = ctk.CTkFrame(self.functions_tab, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=20, pady=20)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        top_panel = ctk.CTkFrame(container, fg_color=self.app.colors["card_bg"], corner_radius=12)
        top_panel.pack(fill="x", pady=(0, 10))

        top_content = ctk.CTkFrame(top_panel, fg_color="transparent")
        top_content.pack(fill="x", padx=20, pady=15)

        ctk.CTkLabel(top_content, text="Input String:", 
                    font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(0, 10))

        self.input_string = ctk.CTkEntry(top_content, 
                                       placeholder_text="Enter text to process...",
                                       width=300)
        self.input_string.pack(side="left", padx=(0, 10))
        self.input_string.insert(0, "  Hello World  ")

        ctk.CTkButton(top_content, text="üîÑ Process", 
                     command=self.process_string_functions,
                     width=100).pack(side="left")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ñ—É–Ω–∫—Ü–∏–∏
        main_content = ctk.CTkFrame(container, fg_color="transparent")
        main_content.pack(fill="both", expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        left_panel = ctk.CTkFrame(main_content, fg_color=self.app.colors["card_bg"], corner_radius=12)
        left_panel.pack(side="left", fill="both", expand=True, padx=(0, 10))

        basic_functions_frame = ctk.CTkFrame(left_panel, fg_color="transparent")
        basic_functions_frame.pack(fill="both", expand=True, padx=20, pady=20)

        ctk.CTkLabel(basic_functions_frame, text="üõ†Ô∏è Basic String Functions", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(0, 15))

        # –ö–Ω–æ–ø–∫–∏ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        basic_buttons1 = ctk.CTkFrame(basic_functions_frame, fg_color="transparent")
        basic_buttons1.pack(fill="x", pady=5)

        ctk.CTkButton(basic_buttons1, text="UPPER()", 
                     command=lambda: self.apply_string_function("UPPER"),
                     width=120).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(basic_buttons1, text="LOWER()", 
                     command=lambda: self.apply_string_function("LOWER"),
                     width=120).pack(side="left", padx=5)

        basic_buttons2 = ctk.CTkFrame(basic_functions_frame, fg_color="transparent")
        basic_buttons2.pack(fill="x", pady=5)

        ctk.CTkButton(basic_buttons2, text="TRIM()", 
                     command=lambda: self.apply_string_function("TRIM"),
                     width=120).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(basic_buttons2, text="LTRIM()", 
                     command=lambda: self.apply_string_function("LTRIM"),
                     width=120).pack(side="left", padx=5)

        basic_buttons3 = ctk.CTkFrame(basic_functions_frame, fg_color="transparent")
        basic_buttons3.pack(fill="x", pady=5)

        ctk.CTkButton(basic_buttons3, text="RTRIM()", 
                     command=lambda: self.apply_string_function("RTRIM"),
                     width=120).pack(side="left", padx=(0, 5))

        # –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫
        substring_frame = ctk.CTkFrame(basic_functions_frame, fg_color="transparent")
        substring_frame.pack(fill="x", pady=15)

        ctk.CTkLabel(substring_frame, text="Substring Functions:", 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w")

        substring_buttons = ctk.CTkFrame(substring_frame, fg_color="transparent")
        substring_buttons.pack(fill="x", pady=5)

        ctk.CTkButton(substring_buttons, text="SUBSTRING()", 
                     command=self.show_substring_dialog,
                     width=120).pack(side="left", padx=(0, 5))

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        right_panel = ctk.CTkFrame(main_content, fg_color=self.app.colors["card_bg"], corner_radius=12)
        right_panel.pack(side="left", fill="both", expand=True)

        advanced_functions_frame = ctk.CTkFrame(right_panel, fg_color="transparent")
        advanced_functions_frame.pack(fill="both", expand=True, padx=20, pady=20)

        ctk.CTkLabel(advanced_functions_frame, text="‚ö° Advanced String Functions", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w", pady=(0, 15))

        # –§—É–Ω–∫—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        padding_frame = ctk.CTkFrame(advanced_functions_frame, fg_color="transparent")
        padding_frame.pack(fill="x", pady=5)

        ctk.CTkLabel(padding_frame, text="Padding Functions:").pack(anchor="w")

        padding_buttons = ctk.CTkFrame(padding_frame, fg_color="transparent")
        padding_buttons.pack(fill="x", pady=5)

        ctk.CTkButton(padding_buttons, text="LPAD()", 
                     command=self.show_lpad_dialog,
                     width=120).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(padding_buttons, text="RPAD()", 
                     command=self.show_rpad_dialog,
                     width=120).pack(side="left", padx=5)

        # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è
        concat_frame = ctk.CTkFrame(advanced_functions_frame, fg_color="transparent")
        concat_frame.pack(fill="x", pady=15)

        ctk.CTkLabel(concat_frame, text="Concatenation:").pack(anchor="w")

        concat_content = ctk.CTkFrame(concat_frame, fg_color="transparent")
        concat_content.pack(fill="x", pady=5)

        ctk.CTkLabel(concat_content, text="String 2:").pack(side="left", padx=(0, 5))
        self.concat_string = ctk.CTkEntry(concat_content, 
                                        placeholder_text="Text to concatenate",
                                        width=150)
        self.concat_string.pack(side="left", padx=(0, 10))

        ctk.CTkButton(concat_content, text="CONCAT", 
                     command=self.apply_concat,
                     width=100).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(concat_content, text="||", 
                     command=self.apply_concat_operator,
                     width=50).pack(side="left")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_frame = ctk.CTkFrame(advanced_functions_frame, fg_color="transparent")
        results_frame.pack(fill="both", expand=True, pady=15)

        ctk.CTkLabel(results_frame, text="üìä Results:", 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w")

        self.function_results = ctk.CTkTextbox(results_frame, height=150)
        self.function_results.pack(fill="both", expand=True, pady=(5, 0))
        self.function_results.configure(state="disabled")

    def on_search_type_changed(self, choice):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞"""
        search_type = self.search_type.get()
        
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏
        self.like_options_frame.pack_forget()
        self.regex_options_frame.pack_forget()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
        if search_type == "LIKE Pattern":
            self.like_options_frame.pack(fill="x", pady=5)
        elif search_type == "POSIX Regex":
            self.regex_options_frame.pack(fill="x", pady=5)

    def toggle_regex_flag(self, flag):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ regex"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
        pass

    def on_table_selected(self, choice):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        self.refresh_columns_list()

    def on_search_table_selected(self, choice):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        self.refresh_search_columns()

    def refresh_table_structure(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
        self.status_label.configure(text="üîÑ Loading table structure...")
        
        def refresh_thread():
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
                tables = ["attacks", "users", "logs", "settings"]
                columns = ["id", "name", "description", "created_at", "status"]
                
                self.app.window.after(0, lambda: self.on_table_structure_loaded(tables, columns))
            except Exception as e:
                self.app.window.after(0, lambda: self.show_error(f"Failed to load table structure: {e}"))

        thread = threading.Thread(target=refresh_thread)
        thread.daemon = True
        thread.start()

    def on_table_structure_loaded(self, tables, columns):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ç–∞–±–ª–∏—Ü
        self.table_selector.configure(values=tables)
        self.search_table_selector.configure(values=tables)
        
        if tables:
            self.table_selector.set(tables[0])
            self.search_table_selector.set(tables[0])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
        self.available_columns_list.delete(0, tk.END)
        for column in columns:
            self.available_columns_list.insert(tk.END, column)
        
        self.status_label.configure(text=f"‚úÖ Loaded {len(columns)} columns")

    def refresh_columns_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        table_name = self.table_selector.get()
        if not table_name or table_name == "Loading...":
            return

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        columns = ["id", "name", "description", "created_at", "status", "severity"]
        
        self.available_columns_list.delete(0, tk.END)
        for column in columns:
            self.available_columns_list.insert(tk.END, column)

    def refresh_search_columns(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        table_name = self.search_table_selector.get()
        if not table_name or table_name == "Loading...":
            return

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        columns = ["name", "description", "notes", "title"]
        
        self.search_column_selector.configure(values=columns)
        if columns:
            self.search_column_selector.set(columns[0])

    def add_column(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏"""
        selection = self.available_columns_list.curselection()
        if not selection:
            return

        column_name = self.available_columns_list.get(selection[0])
        if column_name not in self.selected_columns:
            self.selected_columns.append(column_name)
            self.selected_columns_list.insert(tk.END, column_name)

    def remove_column(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏"""
        selection = self.selected_columns_list.curselection()
        if not selection:
            return

        column_name = self.selected_columns_list.get(selection[0])
        if column_name in self.selected_columns:
            self.selected_columns.remove(column_name)
            self.selected_columns_list.delete(selection[0])

    def add_all_columns(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        all_columns = self.available_columns_list.get(0, tk.END)
        self.selected_columns.clear()
        self.selected_columns_list.delete(0, tk.END)
        
        for column in all_columns:
            self.selected_columns.append(column)
            self.selected_columns_list.insert(tk.END, column)

    def add_aggregate(self, aggregate_func):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        if aggregate_func == "COUNT(*)":
            self.selected_columns.append("COUNT(*)")
            self.selected_columns_list.insert(tk.END, "COUNT(*)")

    def show_aggregate_dialog(self, func_name):
        """–ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∫–æ–ª–æ–Ω–∫–æ–π"""
        dialog = ctk.CTkToplevel(self.app.window)
        dialog.title(f"{func_name} Function")
        dialog.geometry("300x150")
        dialog.resizable(False, False)
        dialog.transient(self.app.window)
        dialog.grab_set()

        content = ctk.CTkFrame(dialog, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=20, pady=20)

        ctk.CTkLabel(content, text=f"Select column for {func_name}:").pack(anchor="w", pady=(0, 10))
        
        column_combo = ctk.CTkComboBox(content, values=list(self.available_columns_list.get(0, tk.END)))
        column_combo.pack(fill="x", pady=(0, 15))

        def add_aggregate_column():
            column = column_combo.get()
            if column:
                agg_func = f"{func_name}({column})"
                self.selected_columns.append(agg_func)
                self.selected_columns_list.insert(tk.END, agg_func)
                dialog.destroy()

        buttons_frame = ctk.CTkFrame(content, fg_color="transparent")
        buttons_frame.pack(fill="x")

        ctk.CTkButton(buttons_frame, text="Add", 
                     command=add_aggregate_column).pack(side="right", padx=(10, 0))

        ctk.CTkButton(buttons_frame, text="Cancel", 
                     command=dialog.destroy).pack(side="right")

    def update_sql_preview(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ SQL"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π SELECT
            if not self.selected_columns:
                columns = "*"
            else:
                columns = ", ".join(self.selected_columns)
            
            table_name = self.table_selector.get()
            sql = f"SELECT {columns}\nFROM {table_name}"

            # –î–æ–±–∞–≤–ª—è–µ–º WHERE
            where_condition = self.where_condition.get().strip()
            if where_condition:
                sql += f"\nWHERE {where_condition}"

            # –î–æ–±–∞–≤–ª—è–µ–º GROUP BY
            group_by = self.group_by_columns.get().strip()
            if group_by:
                sql += f"\nGROUP BY {group_by}"

                # –î–æ–±–∞–≤–ª—è–µ–º HAVING
                having_condition = self.having_condition.get().strip()
                if having_condition:
                    sql += f"\nHAVING {having_condition}"

            # –î–æ–±–∞–≤–ª—è–µ–º ORDER BY
            order_by = self.order_by_columns.get().strip()
            if order_by:
                sql += f"\nORDER BY {order_by}"

            # –û–±–Ω–æ–≤–ª—è–µ–º preview
            self.sql_preview.configure(state="normal")
            self.sql_preview.delete("1.0", "end")
            self.sql_preview.insert("1.0", sql)
            self.sql_preview.configure(state="disabled")

        except Exception as e:
            self.show_error(f"Error generating SQL: {e}")

    def execute_query(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        sql = self.sql_preview.get("1.0", "end-1c").strip()
        if not sql:
            self.show_error("No query to execute!")
            return

        self.status_label.configure(text="‚ö° Executing query...")
        
        def execute_thread():
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
                self.app.window.after(0, lambda: self.on_query_executed([
                    {"id": 1, "name": "Example", "count": 5},
                    {"id": 2, "name": "Test", "count": 3}
                ]))
            except Exception as e:
                self.app.window.after(0, lambda: self.show_error(f"Query execution failed: {e}"))

        thread = threading.Thread(target=execute_thread)
        thread.daemon = True
        thread.start()

    def on_query_executed(self, results):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        self.status_label.configure(text=f"‚úÖ Query executed - {len(results)} rows")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        self.app.show_success(f"Query executed successfully! Found {len(results)} rows.")

    def test_search_pattern(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        pattern = self.search_pattern.get().strip()
        test_data = self.test_data.get("1.0", "end-1c").strip()
        
        if not pattern:
            self.show_error("Please enter a search pattern!")
            return

        if not test_data:
            self.show_error("Please enter test data!")
            return

        search_type = self.search_type.get()
        test_lines = test_data.split('\n')
        results = []

        try:
            if search_type == "LIKE Pattern":
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º LIKE –≤ regex –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                regex_pattern = pattern.replace('%', '.*').replace('_', '.')
                if not self.case_sensitive.get():
                    regex_pattern = f"(?i){regex_pattern}"
                
                for line in test_lines:
                    if line and re.match(regex_pattern, line):
                        results.append(f"‚úì MATCH: {line}")
                    else:
                        results.append(f"‚úó NO MATCH: {line}")

            elif search_type == "POSIX Regex":
                flags = re.IGNORECASE if not self.case_sensitive.get() else 0
                for line in test_lines:
                    if line and re.search(pattern, line, flags):
                        results.append(f"‚úì MATCH: {line}")
                    else:
                        results.append(f"‚úó NO MATCH: {line}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.test_results.configure(state="normal")
            self.test_results.delete("1.0", "end")
            self.test_results.insert("1.0", "\n".join(results))
            self.test_results.configure(state="disabled")

        except re.error as e:
            self.show_error(f"Invalid regex pattern: {e}")

    def execute_search(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        table_name = self.search_table_selector.get()
        column_name = self.search_column_selector.get()
        pattern = self.search_pattern.get().strip()
        search_type = self.search_type.get()

        if not all([table_name, column_name, pattern]):
            self.show_error("Please fill all search fields!")
            return

        self.status_label.configure(text="üîç Executing search...")
        
        def search_thread():
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
                results = [{"id": 1, column_name: "Example match"}]
                self.app.window.after(0, lambda: self.on_search_executed(results))
            except Exception as e:
                self.app.window.after(0, lambda: self.show_error(f"Search failed: {e}"))

        thread = threading.Thread(target=search_thread)
        thread.daemon = True
        thread.start()

    def on_search_executed(self, results):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.status_label.configure(text=f"‚úÖ Search completed - {len(results)} matches")
        self.app.show_success(f"Search completed! Found {len(results)} matches.")

    def process_string_functions(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        input_text = self.input_string.get().strip()
        if not input_text:
            self.show_error("Please enter input text!")
            return

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.function_results.configure(state="normal")
        self.function_results.delete("1.0", "end")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.function_results.insert("end", f"Input: '{input_text}'\n")
        self.function_results.insert("end", "="*50 + "\n\n")
        
        self.function_results.configure(state="disabled")

    def apply_string_function(self, func_name):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        input_text = self.input_string.get().strip()
        if not input_text:
            self.show_error("Please enter input text!")
            return

        result = ""
        
        if func_name == "UPPER":
            result = input_text.upper()
        elif func_name == "LOWER":
            result = input_text.lower()
        elif func_name == "TRIM":
            result = input_text.strip()
        elif func_name == "LTRIM":
            result = input_text.lstrip()
        elif func_name == "RTRIM":
            result = input_text.rstrip()

        self.display_function_result(func_name, input_text, result)

    def show_substring_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ SUBSTRING"""
        self.show_string_function_dialog("SUBSTRING", ["Start position:", "Length (optional):"])

    def show_lpad_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ LPAD"""
        self.show_string_function_dialog("LPAD", ["Total length:", "Pad character:"])

    def show_rpad_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ RPAD"""
        self.show_string_function_dialog("RPAD", ["Total length:", "Pad character:"])

    def show_string_function_dialog(self, func_name, field_labels):
        """–û–±—â–∏–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        dialog = ctk.CTkToplevel(self.app.window)
        dialog.title(f"{func_name} Function")
        dialog.geometry("300x200")
        dialog.resizable(False, False)
        dialog.transient(self.app.window)
        dialog.grab_set()

        content = ctk.CTkFrame(dialog, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=20, pady=20)

        entries = []
        for label in field_labels:
            ctk.CTkLabel(content, text=label).pack(anchor="w", pady=(5, 0))
            entry = ctk.CTkEntry(content)
            entry.pack(fill="x", pady=(2, 10))
            entries.append(entry)

        def apply_function():
            params = [entry.get() for entry in entries]
            input_text = self.input_string.get().strip()
            
            if not input_text:
                self.show_error("Please enter input text!")
                return

            result = self.calculate_string_function(func_name, input_text, params)
            self.display_function_result(func_name, input_text, result, params)
            dialog.destroy()

        buttons_frame = ctk.CTkFrame(content, fg_color="transparent")
        buttons_frame.pack(fill="x", pady=10)

        ctk.CTkButton(buttons_frame, text="Apply", 
                     command=apply_function).pack(side="right", padx=(10, 0))

        ctk.CTkButton(buttons_frame, text="Cancel", 
                     command=dialog.destroy).pack(side="right")

    def calculate_string_function(self, func_name, input_text, params):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            if func_name == "SUBSTRING":
                start = int(params[0]) - 1  # Convert to 0-based index
                length = int(params[1]) if params[1] else None
                if length:
                    return input_text[start:start + length]
                else:
                    return input_text[start:]
                    
            elif func_name == "LPAD":
                length = int(params[0])
                pad_char = params[1] if params[1] else " "
                return input_text.rjust(length, pad_char)
                
            elif func_name == "RPAD":
                length = int(params[0])
                pad_char = params[1] if params[1] else " "
                return input_text.ljust(length, pad_char)
                
        except (ValueError, IndexError) as e:
            return f"Error: {str(e)}"

    def apply_concat(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ CONCAT"""
        input_text = self.input_string.get().strip()
        concat_text = self.concat_string.get().strip()
        
        if not input_text or not concat_text:
            self.show_error("Please enter both strings!")
            return

        result = input_text + concat_text
        self.display_function_result("CONCAT", input_text, result, [concat_text])

    def apply_concat_operator(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ||"""
        input_text = self.input_string.get().strip()
        concat_text = self.concat_string.get().strip()
        
        if not input_text or not concat_text:
            self.show_error("Please enter both strings!")
            return

        result = input_text + concat_text
        self.display_function_result("||", input_text, result, [concat_text])

    def display_function_result(self, func_name, input_text, result, params=None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
        self.function_results.configure(state="normal")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        if params:
            params_str = ", ".join([f"'{p}'" for p in params])
            self.function_results.insert("end", f"{func_name}( '{input_text}', {params_str} )\n")
        else:
            self.function_results.insert("end", f"{func_name}( '{input_text}' )\n")
            
        self.function_results.insert("end", f"Result: '{result}'\n")
        self.function_results.insert("end", "-" * 30 + "\n")
        
        self.function_results.see("end")
        self.function_results.configure(state="disabled")

    def show_error(self, message):
        """–ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏"""
        self.status_label.configure(text="‚ùå Error")
        self.app.show_error(message)

# –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç tkinter
import tkinter as tk